<?php
namespace App\Controller;

use App\Controller\AppController;

/**
 * BalanceTransactions Controller
 *
 * @property \App\Model\Table\BalanceTransactionsTable $BalanceTransactions
 * @property \App\Model\Table\UsersTable $Users
 * @property \App\Model\Table\VoucherTransactionsTable $VoucherTransactions
 *
 * @method \App\Model\Entity\BalanceTransaction[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class BalanceTransactionsController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Users');
        $this->loadModel('VoucherTransactions');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $this->request->allowMethod('get');
        $balanceTransactions = $this->BalanceTransactions->find()
            ->where(['user_id' => $this->request->query('id')]);

        $this->set([
            'transactions' => $balanceTransactions,
            '_serialize' => ['transactions']
        ]);
    }

    /**
     * View method
     *
     * @param string|null $id Balance Transaction id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $balanceTransaction = $this->BalanceTransactions->get($id, [
            'contain' => ['Users', 'VoucherTransactions'],
        ]);

        $this->set('balanceTransaction', $balanceTransaction);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $balanceTransaction = $this->BalanceTransactions->newEntity();
        if ($this->request->is('post')) {
            $balanceTransaction = $this->BalanceTransactions->patchEntity($balanceTransaction, $this->request->getData());
            if ($this->BalanceTransactions->save($balanceTransaction)) {
                $this->Flash->success(__('The balance transaction has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The balance transaction could not be saved. Please, try again.'));
        }
        $users = $this->BalanceTransactions->Users->find('list', ['limit' => 200]);
        $voucherTransactions = $this->BalanceTransactions->VoucherTransactions->find('list', ['limit' => 200]);
        $this->set(compact('balanceTransaction', 'users', 'voucherTransactions'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Balance Transaction id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $balanceTransaction = $this->BalanceTransactions->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $balanceTransaction = $this->BalanceTransactions->patchEntity($balanceTransaction, $this->request->getData());
            if ($this->BalanceTransactions->save($balanceTransaction)) {
                $this->Flash->success(__('The balance transaction has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The balance transaction could not be saved. Please, try again.'));
        }
        $users = $this->BalanceTransactions->Users->find('list', ['limit' => 200]);
        $voucherTransactions = $this->BalanceTransactions->VoucherTransactions->find('list', ['limit' => 200]);
        $this->set(compact('balanceTransaction', 'users', 'voucherTransactions'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Balance Transaction id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $balanceTransaction = $this->BalanceTransactions->get($id);
        if ($this->BalanceTransactions->delete($balanceTransaction)) {
            $this->Flash->success(__('The balance transaction has been deleted.'));
        } else {
            $this->Flash->error(__('The balance transaction could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
