<?php

namespace App\Controller;

use App\Controller\AppController;
use App\Model\Table\VoucherTransactionsTable;
use phpDocumentor\Reflection\Types\Integer;

/**
 * VoucherTransactions Controller
 *
 * @property \App\Model\Table\VoucherTransactionsTable $VoucherTransactions
 * @property \App\Model\Table\UsersTable $Users
 * @property \App\Model\Table\BalanceTransactionsTable $BalanceTransactions
 *
 * @method \App\Model\Entity\VoucherTransaction[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class VoucherTransactionsController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Users');
        $this->loadModel('BalanceTransactions');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index()
    {
        $this->request->allowMethod('get');

        if ($this->request->query('id') == 44) {
            $voucherTransaction = $this->VoucherTransactions->find('all');

            $this->set([
                'voucherTransactions' => $voucherTransaction,
                '_serialize' => ['voucherTransactions']
            ]);
        } else {
            $voucherTransaction = $this->VoucherTransactions->find('all')
                ->where(['user_id' => $this->request->query('id')]);

            $this->set([
                'voucherTransactions' => $voucherTransaction,
                '_serialize' => ['voucherTransactions']
            ]);
        }

    }

    public function getUsers()
    {
        $this->request->allowMethod('get');

        $users = $this->Users->find('all');

        $this->set([
            'users' => $users,
            '_serialize' => 'users'
        ]);
    }

    /**
     * View method
     *
     * @param string|null $id Voucher Transaction id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $voucherTransaction = $this->VoucherTransactions->get($id, [
            'contain' => ['Users', 'Transactions', 'PartnerUsers', 'Realms', 'Profiles'],
        ]);

        $this->set('voucherTransaction', $voucherTransaction);
    }


    function checkTransaction(): int
    {
        $idA = $this->BalanceTransactions->find()->select('id')
            ->where([
                'user_id' => $this->request->getData('partner_user_id')
            ]);

        $id = 0;
        foreach ($idA as $row) {
            $id = $row->id;
        }
        return $id;
    }


    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $this->request->allowMethod('post');


        if ($this->checkTransaction()) {
            $transaction = $this->VoucherTransactions->newEntity();
            $transaction = $this->VoucherTransactions->patchEntity($transaction, $this->request->getData());

            $transaction = $transaction->set([
                'debit' => $this->request->getData('transfer_amount')
            ]);

            if ($this->VoucherTransactions->save($transaction)) {
                $balanceTransaction = $this->BalanceTransactions->get($this->checkTransaction());

                $balanceTransaction = $balanceTransaction->set([
                    'credit' => $balanceTransaction->get('credit') + $this->request->getData('transfer_amount'),
                    'balance' => $balanceTransaction->get('balance') + $this->request->getData('transfer_amount')
                ]);

//                $newTransaction = $this->BalanceTransactions->get($this->checkTransaction(), [
//                    'contain' => [],
//                ]);
//                $newTransaction = $this->BalanceTransactions->
//                    patchEntity($newTransaction, $balanceTransaction);
                if ($this->BalanceTransactions->save($balanceTransaction)) {
                    $this->set([
                        'balanceTransaction' => $balanceTransaction,
                        'success'=> true,
                        '_serialize' => ['success','balanceTransaction']
                    ]);
                }
            }
        }
        else {
            $this->set([
                'message' => 'Invalid partner account',
                'success' => false,
                '_serialize' => ['message', 'success']
            ]);
        }
    }


//        $this->User->field('name', ['email' => 'user@example.com']);

//        $partner = $this->VoucherTransactions->find('all', ['contain' => ['user_id']])
//            ->where(['user_id' => $this->request->getData('partner_user_id')]);
//
//
//        $partner = $partner->get
//            ->where(['user_id' => $this->request->getData('partner_user_id')]);
//            $partner = true;


//        $previousTransaction->get('balance') <= $this->request->getData('transfer_amount')


//            if ($id) {

//                $transaction = $this->VoucherTransactions->get($id);
//                $transaction = $this->VoucherTransactions->patchEntity($transaction, $this->request->getData());
//
//
//        $transaction = $transaction->set([
//            'balance' => $previousTransaction->get('balance')
//                - $this->request->getData('transfer_amount'),
//
//            'debit' => $previousTransaction->get('debit')
//                + $this->request->getData('transfer_amount')
//        ]);
//
//
//                if ($this->VoucherTransactions->save($transaction)) {
//                    $this->set([
//                        'transaction' => $transaction,
//                        'success' => true,
//                        '_serialize' => ['transaction', 'success']
//                    ]);
//                }
//
//            } else

//                $transaction = $this->VoucherTransactions->newEntity();
//                $transaction = $this->VoucherTransactions->patchEntity($transaction, $this->request->getData());
//                $transaction = $transaction->set(['balance' => $this->request->getData('transfer_amount')]);
//
//
////            --------------------------------Create balance transactions-----------------------------------
//
//                $balanceTransaction = $this->BalanceTransactions->newEntity();
//                $balanceTransaction = $balanceTransaction->set([
//                    'user_id' => $this->request->getData('partner_user_id'),
//                    'credit' => 0,
//                    'debit' => 0,
//                    'balance' => 0
//                ]);
//
//                if ($this->BalanceTransactions->save($balanceTransaction)) {
//                    if ($this->VoucherTransactions->save($transaction)) {
//                        $this->set([
//                            'transaction' => $transaction,
//                            'success' => true,
//                            '_serialize' => ['transaction', 'success']
//                        ]);
//                    } else {
//                        $this->set([
//                            'balance' => 'Insufficient balance',
//                            'success' => false,
//                            '_serialize' => ['success', 'balance']
//                        ]);
//                    }
//                }


//        $partner = $this->VoucherTransactions->get($id)->transfer_amount;
//        if ($id) {
//            $success = true;
//        } else $success = false;


//        if ($this->VoucherTransactions->save($transaction)) {

//        }


//        $transaction = $this->VoucherTransactions->newEntity($this->request->getData());
//        $transaction = $transaction->set()

//        if (VoucherTransactionsTable::->save($transaction)){

//        }

//        $voucherTransaction = $this->VoucherTransactions->newEntity();
//        if ($this->request->is('post')) {
//            $voucherTransaction = $this->VoucherTransactions->patchEntity($voucherTransaction, $this->request->getData());
//            if ($this->VoucherTransactions->save($voucherTransaction)) {
//                $this->Flash->success(__('The voucher transaction has been saved.'));
//
//                return $this->redirect(['action' => 'index']);
//            }
//            $this->Flash->error(__('The voucher transaction could not be saved. Please, try again.'));
//        }
//        $users = $this->VoucherTransactions->Users->find('list', ['limit' => 200]);
//        $transactions = $this->VoucherTransactions->Transactions->find('list', ['limit' => 200]);
//        $partnerUsers = $this->VoucherTransactions->PartnerUsers->find('list', ['limit' => 200]);
//        $realms = $this->VoucherTransactions->Realms->find('list', ['limit' => 200]);
//        $profiles = $this->VoucherTransactions->Profiles->find('list', ['limit' => 200]);
//        $this->set(compact('voucherTransaction', 'users', 'transactions', 'partnerUsers', 'realms', 'profiles'));
//    }

    /**
     * Edit method
     *
     * @param string|null $id Voucher Transaction id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit()
    {

        $id = $this->Users->find()->select('id')
            ->where([
                'username' => $this->request->getData('username')
            ]);
        $this->set([
            'id' => $id,
            '_serialize' => ['id']
        ]);
    }

    /**
     * Delete method
     *
     * @param string|null $id Voucher Transaction id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $voucherTransaction = $this->VoucherTransactions->get($id);
        if ($this->VoucherTransactions->delete($voucherTransaction)) {
            $this->Flash->success(__('The voucher transaction has been deleted.'));
        } else {
            $this->Flash->error(__('The voucher transaction could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
}
